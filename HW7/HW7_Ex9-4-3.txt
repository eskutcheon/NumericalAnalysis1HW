f = @(x)(x.^(1/2));
quadcompmidpt(f,0,1,2)

ans =

   0.707106781186548

%exact answer will be 2/3
quadcompmidpt(f,0,1,4)

ans =

   0.683012701892219

quadcompmidpt(f,0,1,6)

ans =

   0.676075333608563

quadcompmidpt(f,0,1,8)

ans =

   0.672977397006162

quadcompmidpt(f,0,1,20)

ans =

   0.668383841146466

quadcompmidpt(f,0,1,40)

ans =

   0.667295339920420

quadcompmidpt(f,0,1,80)

ans =

   0.666894328804411

% The funtion's error tends to 0 as n tends to inf, 
% but the sum converges to the exact value ever more slowly as n -> inf
quadcompmidpt(f,1,2,2)

ans =

   1.224744871391589

quadcompmidpt(f,1,2,4)

ans =

   1.220454822141095

quadcompmidpt(f,1,2,6)

ans =

   1.219624907299631

quadcompmidpt(f,1,2,20)

ans =

   1.219012398501179

quadcompmidpt(f,1,2,40)

ans =

   1.218966669009381

% exact value is an irrational number. 
quadcompmidpt(f,1,2,60)

ans =

   1.218958195970050

% seems to approach just as slowly
quadcompmidpt(f,0,1,3)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('quadcompmidpt', 'C:\Users\Jacob\Documents\MATLAB\quadcompmidpt.m', 5)" style="font-weight:bold">quadcompmidpt</a> (<a href="matlab: opentoline('C:\Users\Jacob\Documents\MATLAB\quadcompmidpt.m',5,0)">line 5</a>)
The number of nodes in a midpoint rule must be even
} 
quadcomptrap(f,0,1,3)

ans =

   0.631282283372451

quadcomptrap(f,0,1,6)

ans =

   0.653678808490507

quadcomptrap(f,0,1,8)

ans =

   0.658130221624454

quadcomptrap(f,0,1,10)

ans =

   0.660509341706817

quadcomptrap(f,0,1,20)

ans =

   0.664446591426642

quadcomptrap(f,0,1,35)

ans =

   0.665696703196296

quadcomptrap(f,0,1,70)

ans =

   0.666320210669794

quadcomptrap(f,1,2,3)

ans =

   1.217600589433868

quadcomptrap(f,1,2,6)

ans =

   1.218612748366749

quadcomptrap(f,1,2,8)

ans =

   1.218760835094640

quadcomptrap(f,1,2,10)

ans =

   1.218829420429446

quadcomptrap(f,1,2,20)

ans =

   1.218920909465313

quadcomptrap(f,1,2,35)

ans =

   1.218941454428744

quadcomptrap(f,1,2,70)

ans =

   1.218948925926721

% seems to approach even slower with the same basic principle
quadcompsimp(f,0,1,2)

ans =

   0.638071187457698

quadcompsimp(f,0,1,4)

ans =

   0.656526264792571

quadcompsimp(f,0,1,6)

ans =

   0.661144316863192

quadcompsimp(f,0,1,8)

ans =

   0.663079280085023

quadcompsimp(f,0,1,20)

ans =

   0.665759007999917

quadcompsimp(f,0,1,40)

ans =

   0.666345757089161

quadcompsimp(f,0,1,80)

ans =

   0.666553207760784

% same principle but it's converging faster than previous methods
quadcompsimp(f,1,2,2)

ans =

   1.218865507989908

quadcompsimp(f,1,2,4)

ans =

   1.218945156857086

quadcompsimp(f,1,2,8)

ans =

   1.218951005387826

quadcompsimp(f,1,2,16)

ans =

   1.218951390450256

quadcompsimp(f,1,2,32)

ans =

   1.218951414863789

quadcompsimp(f,1,2,64)

ans =

   1.218951416395265

quadcompsimp(f,1,2,64)-quadcomptrap(f,1,2,64)

ans =

     2.979336146902156e-06

quadcompsimp(f,1,2,6)-quadcomptrap(f,1,2,6)

ans =

     3.373863109608077e-04

quadcompsimp(f,1,2,20)-quadcomptrap(f,1,2,20)

ans =

     3.049634528839995e-05

quadcompsimp(f,1,2,20)-quadcompmidpt(f,1,2,20)

ans =

    -6.099269057791012e-05

diary off
